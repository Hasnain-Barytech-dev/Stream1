# Development environment Kubernetes configuration for EINO Streaming Service
apiVersion: v1
kind: Namespace
metadata:
  name: eino-streaming-dev
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: streaming-config
  namespace: eino-streaming-dev
data:
  DEV_MODE: "true"
  DJANGO_API_URL: "http://django-backend.eino-dev.svc.cluster.local:8080/api/v2"
  RAW_VIDEOS_BUCKET: "eino-raw-videos-dev"
  PROCESSED_VIDEOS_BUCKET: "eino-processed-videos-dev"
  REDIS_HOST: "redis.eino-streaming-dev.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  FFMPEG_THREADS: "4"
  HLS_SEGMENT_DURATION: "6"
  DASH_SEGMENT_DURATION: "4"
  BACKEND_CORS_ORIGINS: "http://localhost:4200,http://localhost,http://127.0.0.1,capacitor://localhost,https://dev.eino.world,https://dev-api.eino.world"
---
apiVersion: v1
kind: Secret
metadata:
  name: streaming-secrets
  namespace: eino-streaming-dev
type: Opaque
data:
  JWT_SECRET_KEY: "c3VwZXItc2VjcmV0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==" # base64 encoded "super-secret-key-change-in-production"
  REDIS_PASSWORD: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streaming-api
  namespace: eino-streaming-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: streaming-api
  template:
    metadata:
      labels:
        app: streaming-api
    spec:
      containers:
      - name: api
        image: gcr.io/eino-project/streaming-service:dev
        imagePullPolicy: Always
        command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
        ports:
        - containerPort: 8000
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: streaming-config
        - secretRef:
            name: streaming-secrets
        volumeMounts:
        - name: storage-volume
          mountPath: /app/storage
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
      volumes:
      - name: storage-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transcoding-worker
  namespace: eino-streaming-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transcoding-worker
  template:
    metadata:
      labels:
        app: transcoding-worker
    spec:
      containers:
      - name: worker
        image: gcr.io/eino-project/streaming-service:dev
        imagePullPolicy: Always
        command: ["python", "-m", "workers.transcoding_worker"]
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        envFrom:
        - configMapRef:
            name: streaming-config
        - secretRef:
            name: streaming-secrets
        volumeMounts:
        - name: storage-volume
          mountPath: /app/storage
      volumes:
      - name: storage-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chunk-worker
  namespace: eino-streaming-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chunk-worker
  template:
    metadata:
      labels:
        app: chunk-worker
    spec:
      containers:
      - name: worker
        image: gcr.io/eino-project/streaming-service:dev
        imagePullPolicy: Always
        command: ["python", "-m", "workers.chunk_worker"]
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: streaming-config
        - secretRef:
            name: streaming-secrets
        volumeMounts:
        - name: storage-volume
          mountPath: /app/storage
      volumes:
      - name: storage-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: manifest-worker
  namespace: eino-streaming-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: manifest-worker
  template:
    metadata:
      labels:
        app: manifest-worker
    spec:
      containers:
      - name: worker
        image: gcr.io/eino-project/streaming-service:dev
        imagePullPolicy: Always
        command: ["python", "-m", "workers.manifest_worker"]
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: streaming-config
        - secretRef:
            name: streaming-secrets
        volumeMounts:
        - name: storage-volume
          mountPath: /app/storage
      volumes:
      - name: storage-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: eino-streaming-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: streaming-api
  namespace: eino-streaming-dev
spec:
  selector:
    app: streaming-api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: eino-streaming-dev
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-worker
  namespace: eino-streaming-dev
spec:
  schedule: "0 */6 * * *"  # Run every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cleanup
            image: gcr.io/eino-project/streaming-service:dev
            command: ["python", "-m", "workers.cleanup_worker"]
            envFrom:
            - configMapRef:
                name: streaming-config
            - secretRef:
                name: streaming-secrets
            volumeMounts:
            - name: storage-volume
              mountPath: /app/storage
          volumes:
          - name: storage-volume
            emptyDir: {}
          restartPolicy: OnFailure